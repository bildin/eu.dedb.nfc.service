package eu.dedb.nfc.chip.pn53x;

/** PN53X register addresses */
public final class REG {

	// Contactless Interface Unit extension
	/**
	 * Defines general modes for transmitting and receiving.
	 */
	public static final short CIU_Mode = 0x6301;
	/**
	 * Defines the transmission data rate and framing during transmission.
	 */
	public static final short CIU_TxMode = 0x6302;
	/**
	 * Defines the reception data rate and framing during receiving
	 */
	public static final short CIU_RxMode = 0x6303;
	/**
	 * Controls the logical behavior of the antenna driver pins TX1 and TX2.
	 */
	public static final short CIU_TxControl = 0x6304;
	/**
	 * Controls the setting of the antenna driver.
	 */
	public static final short CIU_TxAuto = 0x6305;
	/**
	 * Selects the sources for the analogue transmitter part
	 */
	public static final short CIU_TxSel = 0x6306;
	/**
	 * Selects internal receiver settings.
	 */
	public static final short CIU_RxSel = 0x6307;
	/**
	 * Selects thresholds for the bit decoder.
	 */
	public static final short CIU_RxThreshold = 0x6308;
	/**
	 * Defines demodulator settings.
	 */
	public static final short CIU_Demod = 0x6309;
	/**
	 * Defines the length of the FeliCa Sync bytes and the minimum length of the
	 * received frame.
	 */
	public static final short CIU_FelNFC1 = 0x630A;
	/**
	 * Defines the maximum length of the received frame/
	 */
	public static final short CIU_FelNFC2 = 0x630B;
	/**
	 * Defines ISO/IEC 14443A/MIFARE/NFC specific settings in target or card
	 * operating mode.
	 */
	public static final short CIU_MifNFC = 0x630C;
	/**
	 * Allows manual fine tuning of the internal receiver.
	 * <p>
	 * <b> IMPORTANT NOTE:</b> For standard application it is not recommended to
	 * change this register settings.
	 */
	public static final short CIU_ManualRCV = 0x630D;
	/**
	 * Selects the specific settings for the ISO/IEC 14443B
	 */
	public static final short CIU_TypeB = 0x630E;
	// public static final short - = 0x630F;
	// public static final short - = 0x6310;
	/**
	 * Shows the actual MSB values of the CRC calculation.
	 * <p>
	 * Note: The CRC is split into two 8-bit registers. See also the
	 * CIU_CRCResultLSB register.<br>
	 * Note: Setting the bit MSBFirst in CIU_Mode register reverses the bit
	 * order, the byte order is not changed
	 */
	public static final short CIU_CRCResultMSB = 0x6311;
	/**
	 * Shows the actual LSB values of the CRC calculation.
	 * <p>
	 * Note: The CRC is split into two 8-bit registers. See also the
	 * CIU_CRCResultMSB register.<br>
	 * Note: Setting the bit MSBFirst in CIU_Mode register reverses the bit
	 * order, the byte order is not changed
	 */
	public static final short CIU_CRCResultLSB = 0x6312;
	/**
	 * Selects the conductance for the N-driver of the antenna driver pins TX1
	 * and TX2 when there is no RF generated by the PN532.
	 */
	public static final short CIU_GsNOFF = 0x6313;
	/**
	 * Controls the setting of the modulation width.
	 */
	public static final short CIU_ModWidth = 0x6314;
	/**
	 * Adjust the bit phase at 106 kbit/s during transmission.
	 */
	public static final short CIU_TxBitPhase = 0x6315;
	/**
	 * Configures the receiver gain and RF level detector sensitivity.
	 */
	public static final short CIU_RFCfg = 0x6316;
	/**
	 * Selects the conductance for the N-driver of the antenna driver pins TX1
	 * and TX2 when generating RF.
	 */
	public static final short CIU_GsNOn = 0x6317;
	/**
	 * Defines the conductance of the P-driver
	 */
	public static final short CIU_CWGsP = 0x6318;
	/**
	 * Defines the driver P-output conductance for the time of modulation.
	 */
	public static final short CIU_ModGsP = 0x6319;
	/**
	 * Defines settings for the internal timer.
	 */
	public static final short CIU_TMode = 0x631A;
	/**
	 * Define the LSB of the Timer-Prescaler.
	 */
	public static final short CIU_TPrescaler = 0x631B;
	/**
	 * Defines the MSB of the 16-bit long timer reload value.
	 */
	public static final short CIU_TReloadVal_hi = 0x631C;
	/**
	 * Defines the LSB of the 16 bit long timer reload value.
	 */
	public static final short CIU_TReloadVal_lo = 0x631D;
	/**
	 * Defines the MSB byte of the current value of the timer.
	 */
	public static final short CIU_TCounterVal_hi = 0x631E;
	/**
	 * Defines the LSB byte of the current value of the timer.
	 */
	public static final short CIU_TCounterVal_lo = 0x631F;
	// public static final short - = 0x6320;
	/**
	 * General test signal configuration.
	 */
	public static final short CIU_TestSel1 = 0x6321;
	/**
	 * General test signal configuration and PRBS control.
	 */
	public static final short CIU_TestSel2 = 0x6322;
	/**
	 * Enable the output drivers for the test pins.
	 */
	public static final short CIU_TestPinEn = 0x6323;
	/**
	 * Defines the values for the 7 bit test bus signals to be I/O on P70_IRQ,
	 * RSTOUT_N, P35, P34 / SIC_CLK, P33_INT1, P32_INT0, P31 / UART_TX and P30 /
	 * UART_RX pins.
	 */
	public static final short CIU_TestPinValue = 0x6324;
	/**
	 * Shows the status of the internal test bus.
	 */
	public static final short CIU_TestBus = 0x6325;
	/**
	 * Controls the digital self-test.
	 */
	public static final short CIU_AutoTest = 0x6326;
	/**
	 * Shows the version of the CIU.
	 */
	public static final short CIU_Version = 0x6327;
	/**
	 * Controls the pins AUX1 and AUX2.
	 */
	public static final short CIU_AnalogTest = 0x6328;
	/**
	 * Defines the test value for TestDAC1.
	 */
	public static final short CIU_TestDAC1 = 0x6329;
	/**
	 * Defines the test value for TestDAC2.
	 */
	public static final short CIU_TestDAC2 = 0x632A;
	/**
	 * Shows the actual value of ADC I and Q channel.
	 */
	public static final short CIU_TestADC = 0x632B;
	// public static final short - = 0x632C;
	// public static final short - = 0x632D;
	// public static final short - = 0x632E;
	/**
	 * Power down of the RF level detector.
	 */
	public static final short CIU_RFlevelDet = 0x632F;
	/**
	 * Enables the use of P34 / SIC_CLK as secure IC clock.
	 */
	public static final short CIU_SIC_CLK_en = 0x6330;
	/**
	 * Starts and stops the command execution.
	 */
	public static final short CIU_Command = 0x6331;
	/**
	 * Control bits to enable and disable the passing of interrupt requests.
	 */
	public static final short CIU_CommIEn = 0x6332;
	/**
	 * Controls bits to enable and disable the passing of interrupt requests.
	 */
	public static final short CIU_DivIEn = 0x6333;
	/**
	 * Contains common CIU interrupt request flags.
	 */
	public static final short CIU_CommIrq = 0x6334;
	/**
	 * Contains miscellaneous interrupt request flags. These bits are latched.
	 */
	public static final short CIU_DivIrq = 0x6335;
	/**
	 * Error flags showing the error status of the last command executed.
	 */
	public static final short CIU_Error = 0x6336;
	/**
	 * Contains status flags of the CRC, Interrupt Request System and FIFO
	 * buffer.
	 */
	public static final short CIU_Status1 = 0x6337;
	/**
	 * Contain status flags of the receiver, transmitter and Data Mode Detector.
	 */
	public static final short CIU_Status2 = 0x6338;
	/**
	 * In- and output of 64 byte FIFO buffer
	 */
	public static final short CIU_FIFOData = 0x6339;
	/**
	 * Indicates the number of bytes stored in the FIFO.
	 */
	public static final short CIU_FIFOLevel = 0x633A;
	/**
	 * Defines the thresholds for FIFO under- and overflow warning.
	 */
	public static final short CIU_WaterLevel = 0x633B;
	/**
	 * Contains miscellaneous control bits.
	 */
	public static final short CIU_Control = 0x633C;
	/**
	 * Adjustments for bit oriented frames.
	 */
	public static final short CIU_BitFraming = 0x633D;
	/**
	 * Defines the first bit collision detected on the RF interface.
	 */
	public static final short CIU_Coll = 0x633E;
}
